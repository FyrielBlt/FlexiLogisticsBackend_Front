"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireContext = void 0;

var requireContext = function requireContext(pattern) {
  var glob = require('glob');

  var path = require('path');

  var fs = require('fs');

  console.log(Object.keys(fs));
  return; // Assume absolute path by default
  // let basepath = directory
  // if (directory[0] === '.') {
  //   // Relative path
  //   basepath = path.join(__dirname, directory)
  // } else if (!path.isAbsolute(directory)) {
  //   // Module path
  //   basepath = require.resolve(directory as string)
  // }

  var keys = [];
  glob(pattern, function (err, files) {
    if (err) {
      console.error(err);
      return;
    }

    console.log(files);
  }); // const keys = dir
  //   .files(basepath, {
  //     recursive: recursive || false
  //   })
  //   .filter((file: string) => {
  //     return file.match(regExp || /\.(json|js)$/)
  //   })
  //   .map((file: string | any[]) => {
  //     return path.join('.', file.slice(basepath.length + 1))
  //   })

  var context = function context(key) {
    return require(context.resolve(key));
  };

  context.resolve = function (key) {
    return path.join(pattern, key);
  };

  context.keys = function () {
    return keys;
  };

  return context;
};

exports.requireContext = requireContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3JlcXVpcmVDb250ZXh0LnRzIl0sIm5hbWVzIjpbInJlcXVpcmVDb250ZXh0IiwicGF0dGVybiIsImdsb2IiLCJyZXF1aXJlIiwicGF0aCIsImZzIiwiY29uc29sZSIsImxvZyIsIk9iamVjdCIsImtleXMiLCJlcnIiLCJmaWxlcyIsImVycm9yIiwiY29udGV4dCIsImtleSIsInJlc29sdmUiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sSUFBTUEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDQyxPQUFELEVBQWdDO0FBQzVELE1BQU1DLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxFQUFFLEdBQUdGLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUVBRyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsTUFBTSxDQUFDQyxJQUFQLENBQVlKLEVBQVosQ0FBWjtBQUNBLFNBTjRELENBTzVEO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNSSxJQUFXLEdBQUcsRUFBcEI7QUFFQVAsRUFBQUEsSUFBSSxDQUFDRCxPQUFELEVBQVUsVUFBQ1MsR0FBRCxFQUFXQyxLQUFYLEVBQTBCO0FBQ3RDLFFBQUlELEdBQUosRUFBUztBQUNQSixNQUFBQSxPQUFPLENBQUNNLEtBQVIsQ0FBY0YsR0FBZDtBQUNBO0FBQ0Q7O0FBQ0RKLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSSxLQUFaO0FBQ0QsR0FORyxDQUFKLENBcEI0RCxDQTJCNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsR0FBRCxFQUFjO0FBQzVCLFdBQU9YLE9BQU8sQ0FBQ1UsT0FBTyxDQUFDRSxPQUFSLENBQWdCRCxHQUFoQixDQUFELENBQWQ7QUFDRCxHQUZEOztBQUlBRCxFQUFBQSxPQUFPLENBQUNFLE9BQVIsR0FBa0IsVUFBQ0QsR0FBRCxFQUFjO0FBQzlCLFdBQU9WLElBQUksQ0FBQ1ksSUFBTCxDQUFVZixPQUFWLEVBQW1CYSxHQUFuQixDQUFQO0FBQ0QsR0FGRDs7QUFJQUQsRUFBQUEsT0FBTyxDQUFDSixJQUFSLEdBQWUsWUFBTTtBQUNuQixXQUFPQSxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPSSxPQUFQO0FBQ0QsQ0FuRE0iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcmVxdWlyZUNvbnRleHQgPSAocGF0dGVybjogc3RyaW5nIHwgc3RyaW5nW10pID0+IHtcbiAgY29uc3QgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKVxuICBjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG4gIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuXG4gIGNvbnNvbGUubG9nKE9iamVjdC5rZXlzKGZzKSlcbiAgcmV0dXJuXG4gIC8vIEFzc3VtZSBhYnNvbHV0ZSBwYXRoIGJ5IGRlZmF1bHRcbiAgLy8gbGV0IGJhc2VwYXRoID0gZGlyZWN0b3J5XG5cbiAgLy8gaWYgKGRpcmVjdG9yeVswXSA9PT0gJy4nKSB7XG4gIC8vICAgLy8gUmVsYXRpdmUgcGF0aFxuICAvLyAgIGJhc2VwYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgZGlyZWN0b3J5KVxuICAvLyB9IGVsc2UgaWYgKCFwYXRoLmlzQWJzb2x1dGUoZGlyZWN0b3J5KSkge1xuICAvLyAgIC8vIE1vZHVsZSBwYXRoXG4gIC8vICAgYmFzZXBhdGggPSByZXF1aXJlLnJlc29sdmUoZGlyZWN0b3J5IGFzIHN0cmluZylcbiAgLy8gfVxuXG4gIGNvbnN0IGtleXM6IGFueVtdID0gW11cblxuICBnbG9iKHBhdHRlcm4sIChlcnI6IGFueSwgZmlsZXM6IGFueSkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGZpbGVzKVxuICB9KVxuICAvLyBjb25zdCBrZXlzID0gZGlyXG4gIC8vICAgLmZpbGVzKGJhc2VwYXRoLCB7XG4gIC8vICAgICByZWN1cnNpdmU6IHJlY3Vyc2l2ZSB8fCBmYWxzZVxuICAvLyAgIH0pXG4gIC8vICAgLmZpbHRlcigoZmlsZTogc3RyaW5nKSA9PiB7XG4gIC8vICAgICByZXR1cm4gZmlsZS5tYXRjaChyZWdFeHAgfHwgL1xcLihqc29ufGpzKSQvKVxuICAvLyAgIH0pXG4gIC8vICAgLm1hcCgoZmlsZTogc3RyaW5nIHwgYW55W10pID0+IHtcbiAgLy8gICAgIHJldHVybiBwYXRoLmpvaW4oJy4nLCBmaWxlLnNsaWNlKGJhc2VwYXRoLmxlbmd0aCArIDEpKVxuICAvLyAgIH0pXG5cbiAgY29uc3QgY29udGV4dCA9IChrZXk6IGFueSkgPT4ge1xuICAgIHJldHVybiByZXF1aXJlKGNvbnRleHQucmVzb2x2ZShrZXkpKVxuICB9XG5cbiAgY29udGV4dC5yZXNvbHZlID0gKGtleTogYW55KSA9PiB7XG4gICAgcmV0dXJuIHBhdGguam9pbihwYXR0ZXJuLCBrZXkpXG4gIH1cblxuICBjb250ZXh0LmtleXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGtleXNcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0XG59XG4iXX0=