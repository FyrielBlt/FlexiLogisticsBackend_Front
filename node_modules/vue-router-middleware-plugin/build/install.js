"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = void 0;

var _middlewarePipeline = require("./core/middlewarePipeline");

var _prepareMiddlewareiPiplinePayload = require("./helpers/prepareMiddlewareiPiplinePayload");

var _InvalidOptions = require("./lib/Exceptions/InvalidOptions");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var install = function install(vue, options) {
  if (_typeof(options) !== 'object') {
    throw new _InvalidOptions.InvalidOptions();
  } // ==== helpers ============


  var app = {};
  var router;
  var globalMiddlewares = [];
  var context = {
    app: app
  };

  if (options && options.router) {
    // if options object
    var _ref = options,
        _router = _ref.router,
        middleware = _ref.middleware,
        _context = _ref.context;
    router = _router;
    /* istanbul ignore if */

    if (middleware !== undefined) {
      globalMiddlewares = (0, _prepareMiddlewareiPiplinePayload.prepareMiddlewarePipelinePayload)(middleware);
    }

    if (_context !== undefined) {
      /* istanbul ignore if */
      if (_typeof(_context) === 'object') {
        context = _objectSpread({}, _context, {}, context);
      } else {
        throw new _InvalidOptions.InvalidOptions('invalid context');
      }
    }
  } else if (options.router === undefined && options.beforeEach === undefined) {
    // if options is not object and not router
    throw new _InvalidOptions.InvalidOptions('router is a required option.');
  } else {
    // if options is router
    router = options;
  }
  /* istanbul ignore next */


  var routeHook = function routeHook(to, from, next) {
    var middlewares = _toConsumableArray(globalMiddlewares);

    if ('middleware' in to.meta) {
      if (_typeof(to.meta.middleware) === 'object') {
        var ignores = [];

        if ('attach' in to.meta.middleware) {
          middlewares = (0, _prepareMiddlewareiPiplinePayload.prepareMiddlewarePipelinePayload)(to.meta.middleware.attach, middlewares);
        }

        if ('ignore' in to.meta.middleware) {
          ignores = (0, _prepareMiddlewareiPiplinePayload.prepareMiddlewarePipelinePayload)(to.meta.middleware.ignore);
        }

        middlewares = middlewares.filter(function (middleware) {
          return !ignores.includes(middleware);
        });
      } else {
        middlewares = (0, _prepareMiddlewareiPiplinePayload.prepareMiddlewarePipelinePayload)(to.meta.middleware, middlewares);
      }
    }

    if (middlewares.length) {
      context = _objectSpread({}, context, {
        to: to,
        from: from,
        next: next
      });
      (0, _middlewarePipeline.middlewarePipeline)(context, middlewares);
    } else {
      next();
    }
  };

  router.beforeEach(routeHook);
  app.$MiddlewarePlugin = true;

  app.$getMiddlewareContext = function () {
    var _context2 = context,
        app = _context2.app,
        _context = _objectWithoutProperties(_context2, ["app"]);

    return _context;
  };

  app.$setMiddlewareContext = function (_context) {
    var _context3 = context,
        app = _context3.app,
        to = _context3.to,
        from = _context3.from,
        redirect = _context3.redirect;
    context = _objectSpread({}, _context, {
      app: app,
      to: to,
      from: from,
      redirect: redirect
    });
    return context;
  };

  app.$updateMiddlewareContext = function (key, value) {
    var _context5;

    var _context4 = context,
        app = _context4.app,
        to = _context4.to,
        from = _context4.from,
        redirect = _context4.redirect;
    context = (_context5 = {}, _defineProperty(_context5, key, value), _defineProperty(_context5, "app", app), _defineProperty(_context5, "to", to), _defineProperty(_context5, "from", from), _defineProperty(_context5, "redirect", redirect), _context5);
  };
};

exports.install = install;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,