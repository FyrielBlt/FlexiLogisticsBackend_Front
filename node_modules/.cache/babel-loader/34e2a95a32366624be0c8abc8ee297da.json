{"ast":null,"code":"'use strict';\n\nimport { getDocument } from 'pdfjs-dist';\nimport { DefaultAnnotationLayerFactory, DefaultTextLayerFactory, PDFFindController, PDFLinkService, PDFPageView, EventBus } from 'pdfjs-dist/web/pdf_viewer.js';\nimport resizeSensor from './resize.vue';\nimport PdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\n\nfunction isPDFDocumentLoadingTask(obj) {\n  return typeof obj === 'object' && obj !== null && obj.__PDFDocumentLoadingTask === true;\n}\n\nexport function createLoadingTask(src, options) {\n  var source;\n  if (typeof src === 'string') source = {\n    url: src\n  };else if (typeof src === 'object' && src !== null) source = Object.assign({}, src);else throw new TypeError('invalid src type');\n  var loadingTask = getDocument(source).promise;\n  loadingTask.__PDFDocumentLoadingTask = true; // since PDFDocumentLoadingTask is not public\n\n  if (options && options.onPassword) loadingTask.onPassword = options.onPassword;\n  if (options && options.onProgress) loadingTask.onProgress = options.onProgress;\n  return loadingTask;\n}\nexport default {\n  createLoadingTask: createLoadingTask,\n  components: {\n    resizeSensor\n  },\n  props: {\n    src: {\n      type: [String, Object, Promise],\n      default: ''\n    },\n    page: {\n      type: Number,\n      default: 1\n    },\n    rotate: {\n      type: Number,\n      default: 0\n    },\n    scale: {\n      type: [Number, String],\n      default: 'page-width'\n    },\n    resize: {\n      type: Boolean,\n      default: false\n    },\n    annotation: {\n      type: Boolean,\n      default: false\n    },\n    text: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function () {\n    return {\n      internalSrc: this.src,\n      pdf: null,\n      pdfViewer: null,\n      loading: true\n    };\n  },\n  watch: {\n    pdf: function (val) {\n      var pdfInfo = val.pdfInfo || val._pdfInfo;\n      this.$emit('numpages', pdfInfo.numPages);\n    },\n    page: function (val) {\n      var self = this;\n      this.pdf.getPage(val).then(function (pdfPage) {\n        self.pdfViewer.setPdfPage(pdfPage);\n        self.pdfViewer.draw();\n      });\n    },\n    scale: function (val) {\n      this.drawScaled(val);\n    },\n    rotate: function (newRotate) {\n      if (this.pdfViewer) {\n        this.pdfViewer.update(this.scale, newRotate);\n        this.pdfViewer.draw();\n      }\n    }\n  },\n  mounted: function () {\n    var self = this;\n\n    if (!isPDFDocumentLoadingTask(self.internalSrc)) {\n      self.internalSrc = createLoadingTask(self.internalSrc);\n      self.$emit('loading', true);\n    }\n\n    var container = this.$refs.container;\n    var eventBus = new EventBus(); // (Optionally) enable hyperlinks within PDF files.\n\n    self.pdfLinkService = new PDFLinkService({\n      eventBus: eventBus,\n      externalLinkTarget: 2\n    }); // (Optionally) enable find controller.\n\n    self.pdfFindController = new PDFFindController({\n      eventBus: eventBus,\n      linkService: self.pdfLinkService\n    });\n    let annotationLayer = undefined,\n        textLayer = undefined;\n\n    if (self.annotation) {\n      annotationLayer = new DefaultAnnotationLayerFactory();\n    }\n\n    if (self.text) {\n      textLayer = new DefaultTextLayerFactory();\n    }\n\n    self.internalSrc.then(function (pdfDocument) {\n      // Document loaded, retrieving the page.\n      self.pdf = pdfDocument;\n      return pdfDocument.getPage(self.page);\n    }).then(function (pdfPage) {\n      // Creating the page view with default parameters.\n      self.pdfViewer = new PDFPageView({\n        container: container,\n        id: self.page,\n        scale: 1,\n        defaultViewport: pdfPage.getViewport({\n          scale: 1\n        }),\n        eventBus: eventBus,\n        textLayerFactory: textLayer,\n        annotationLayerFactory: annotationLayer\n      }); // Associates the actual page with the view, and drawing it\n\n      self.pdfViewer.setPdfPage(pdfPage); // Set up a scrollPageIntoView function for our links\n\n      var viewer = {\n        scrollPageIntoView: function (params) {\n          // Send an event when clicking internal links so we can handle loading/scrolling to the correct page\n          self.$emit('link-clicked', params);\n        }\n      };\n      self.pdfLinkService.setDocument(self.pdf);\n      self.pdfLinkService.setViewer(viewer);\n      self.pdfFindController.setDocument(self.pdf);\n      self.drawScaled(self.scale);\n      self.loading = false;\n      self.$emit('loading', false);\n    }).catch(err => {\n      self.$emit('error', err);\n      self.loading = false;\n      self.$emit('loading', false);\n    });\n  },\n\n  beforeDestroy() {\n    var self = this;\n\n    if (self.pdfViewer) {\n      self.pdfViewer.destroy();\n      self.pdfViewer = null;\n    }\n  },\n\n  methods: {\n    calculateScale: function (width = -1, height = -1) {\n      this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n\n      if (width === -1 && height === -1) {\n        width = this.$refs.container.offsetWidth;\n      }\n\n      return width / this.pdfViewer.viewport.width;\n    },\n    calculateScaleHeight: function () {\n      this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n\n      var height = this.$refs.container.offsetHeight;\n      var parentel = this.$refs.container.parentElement.parentElement;\n      return parentel.offsetHeight / height;\n    },\n    drawScaled: function (newScale) {\n      if (this.pdfViewer) {\n        if (newScale === 'page-width') {\n          newScale = this.calculateScale();\n          this.$emit(\"update:scale\", newScale);\n        } else if (newScale === 'page-height') {\n          newScale = this.calculateScaleHeight();\n          this.$emit(\"update:scale\", newScale);\n        }\n\n        this.pdfViewer.update(newScale, this.rotate); // The SimpleLinkService from the DefaultAnnotationLayerFactory doesn't do anything with links so override with our LinkService after it is created\n\n        if (this.annotation) {\n          this.pdfViewer.annotationLayer = this.pdfViewer.annotationLayerFactory.createAnnotationLayerBuilder(this.pdfViewer.div, this.pdfViewer.pdfPage);\n          this.pdfViewer.annotationLayer.linkService = this.pdfLinkService;\n        }\n\n        this.pdfViewer.draw(); // The findController needs the text layer to have been created in the Draw() function, so link it in now\n\n        if (this.text) {\n          this.pdfViewer.textLayer.findController = this.pdfFindController;\n        }\n\n        this.loading = false;\n        this.$emit('loading', false);\n      }\n    },\n    resizeScale: function () {\n      if (this.resize) {\n        this.drawScaled('page-width');\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAUE;;AACA,SAASA,WAAT,QAA4B,YAA5B;AACA,SACEC,6BADF,EAEEC,uBAFF,EAGEC,iBAHF,EAIEC,cAJF,EAKEC,WALF,EAMEC,QANF,QAOO,8BAPP;AAQA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;;AACA,SAASC,wBAAT,CAAkCC,GAAlC,EAAuC;AACrC,SAAO,OAAQA,GAAR,KAAiB,QAAjB,IAA6BA,GAAE,KAAM,IAArC,IAA6CA,GAAG,CAACC,wBAAJ,KAAiC,IAArF;AACF;;AAEA,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;AAC9C,MAAIC,MAAJ;AACA,MAAI,OAAQF,GAAR,KAAiB,QAArB,EACEE,MAAK,GAAI;AACPC,OAAG,EAAEH;AADE,GAAT,CADF,KAIK,IAAI,OAAQA,GAAR,KAAiB,QAAjB,IAA6BA,GAAE,KAAM,IAAzC,EACHE,MAAK,GAAIE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,GAAlB,CAAT,CADG,KAGH,MAAM,IAAIM,SAAJ,CAAc,kBAAd,CAAN;AAEF,MAAIC,WAAU,GAAIpB,WAAW,CAACe,MAAD,CAAX,CAAoBM,OAAtC;AACAD,aAAW,CAACT,wBAAZ,GAAuC,IAAvC,CAZ8C,CAYD;;AAE7C,MAAIG,OAAM,IAAKA,OAAO,CAACQ,UAAvB,EACEF,WAAW,CAACE,UAAZ,GAAyBR,OAAO,CAACQ,UAAjC;AAEF,MAAIR,OAAM,IAAKA,OAAO,CAACS,UAAvB,EACEH,WAAW,CAACG,UAAZ,GAAyBT,OAAO,CAACS,UAAjC;AAEF,SAAOH,WAAP;AACF;AAEA,eAAe;AACbR,mBAAiB,EAAEA,iBADN;AAEbY,YAAU,EAAE;AACVjB;AADU,GAFC;AAKbkB,OAAK,EAAE;AACLZ,OAAG,EAAE;AACHa,UAAI,EAAE,CAACC,MAAD,EAASV,MAAT,EAAiBW,OAAjB,CADH;AAEHC,aAAO,EAAE;AAFN,KADA;AAKLC,QAAI,EAAE;AACJJ,UAAI,EAAEK,MADF;AAEJF,aAAO,EAAE;AAFL,KALD;AASLG,UAAM,EAAE;AACNN,UAAI,EAAEK,MADA;AAENF,aAAO,EAAE;AAFH,KATH;AAaLI,SAAK,EAAE;AACLP,UAAI,EAAE,CAACK,MAAD,EAASJ,MAAT,CADD;AAELE,aAAO,EAAE;AAFJ,KAbF;AAiBLK,UAAM,EAAE;AACNR,UAAI,EAAES,OADA;AAENN,aAAO,EAAE;AAFH,KAjBH;AAqBLO,cAAU,EAAE;AACVV,UAAI,EAAES,OADI;AAEVN,aAAO,EAAE;AAFC,KArBP;AAyBLQ,QAAI,EAAE;AACJX,UAAI,EAAES,OADF;AAEJN,aAAO,EAAE;AAFL;AAzBD,GALM;AAmCbS,MAAI,EAAE,YAAY;AAChB,WAAO;AACLC,iBAAW,EAAE,KAAK1B,GADb;AAEL2B,SAAG,EAAE,IAFA;AAGLC,eAAS,EAAE,IAHN;AAILC,aAAO,EAAE;AAJJ,KAAP;AAMD,GA1CY;AA2CbC,OAAK,EAAE;AACLH,OAAG,EAAE,UAAUI,GAAV,EAAe;AAClB,UAAIC,OAAM,GAAID,GAAG,CAACC,OAAJ,IAAeD,GAAG,CAACE,QAAjC;AACA,WAAKC,KAAL,CAAW,UAAX,EAAuBF,OAAO,CAACG,QAA/B;AACD,KAJI;AAKLlB,QAAI,EAAE,UAAUc,GAAV,EAAe;AACnB,UAAIK,IAAG,GAAI,IAAX;AACA,WAAKT,GAAL,CAASU,OAAT,CAAiBN,GAAjB,EAAsBO,IAAtB,CAA2B,UAAUC,OAAV,EAAmB;AAC5CH,YAAI,CAACR,SAAL,CAAeY,UAAf,CAA0BD,OAA1B;AACAH,YAAI,CAACR,SAAL,CAAea,IAAf;AACD,OAHD;AAID,KAXI;AAYLrB,SAAK,EAAE,UAAUW,GAAV,EAAe;AACpB,WAAKW,UAAL,CAAgBX,GAAhB;AACD,KAdI;AAeLZ,UAAM,EAAE,UAAUwB,SAAV,EAAqB;AAC3B,UAAI,KAAKf,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAegB,MAAf,CAAsB,KAAKxB,KAA3B,EAAkCuB,SAAlC;AACA,aAAKf,SAAL,CAAea,IAAf;AACF;AACD;AApBI,GA3CM;AAiEbI,SAAO,EAAE,YAAY;AACnB,QAAIT,IAAG,GAAI,IAAX;;AACA,QAAI,CAACxC,wBAAwB,CAACwC,IAAI,CAACV,WAAN,CAA7B,EAAiD;AAC/CU,UAAI,CAACV,WAAL,GAAmB3B,iBAAiB,CAACqC,IAAI,CAACV,WAAN,CAApC;AACAU,UAAI,CAACF,KAAL,CAAW,SAAX,EAAsB,IAAtB;AACF;;AAEA,QAAIY,SAAQ,GAAI,KAAKC,KAAL,CAAWD,SAA3B;AACA,QAAIE,QAAO,GAAI,IAAIvD,QAAJ,EAAf,CARmB,CAUnB;;AACA2C,QAAI,CAACa,cAAL,GAAsB,IAAI1D,cAAJ,CAAmB;AACvCyD,cAAQ,EAAEA,QAD6B;AAEvCE,wBAAkB,EAAE;AAFmB,KAAnB,CAAtB,CAXmB,CAgBnB;;AACAd,QAAI,CAACe,iBAAL,GAAyB,IAAI7D,iBAAJ,CAAsB;AAC7C0D,cAAQ,EAAEA,QADmC;AAE7CI,iBAAW,EAAEhB,IAAI,CAACa;AAF2B,KAAtB,CAAzB;AAKA,QAAII,eAAc,GAAIC,SAAtB;AAAA,QACEC,SAAQ,GAAID,SADd;;AAGA,QAAIlB,IAAI,CAACb,UAAT,EAAqB;AACnB8B,qBAAc,GAAI,IAAIjE,6BAAJ,EAAlB;AACF;;AACA,QAAIgD,IAAI,CAACZ,IAAT,EAAe;AACb+B,eAAQ,GAAI,IAAIlE,uBAAJ,EAAZ;AACF;;AAEA+C,QAAI,CAACV,WAAL,CACGY,IADH,CACQ,UAAUkB,WAAV,EAAuB;AAC3B;AACApB,UAAI,CAACT,GAAL,GAAW6B,WAAX;AACA,aAAOA,WAAW,CAACnB,OAAZ,CAAoBD,IAAI,CAACnB,IAAzB,CAAP;AACD,KALH,EAKKqB,IALL,CAKU,UAAUC,OAAV,EAAmB;AACzB;AACAH,UAAI,CAACR,SAAL,GAAiB,IAAIpC,WAAJ,CAAgB;AAC/BsD,iBAAS,EAAEA,SADoB;AAE/BW,UAAE,EAAErB,IAAI,CAACnB,IAFsB;AAG/BG,aAAK,EAAE,CAHwB;AAI/BsC,uBAAe,EAAEnB,OAAO,CAACoB,WAAR,CAAoB;AACnCvC,eAAK,EAAE;AAD4B,SAApB,CAJc;AAO/B4B,gBAAQ,EAAEA,QAPqB;AAQ/BY,wBAAgB,EAAEL,SARa;AAS/BM,8BAAsB,EAAER;AATO,OAAhB,CAAjB,CAFyB,CAazB;;AACAjB,UAAI,CAACR,SAAL,CAAeY,UAAf,CAA0BD,OAA1B,EAdyB,CAezB;;AACA,UAAIuB,MAAK,GAAI;AACXC,0BAAkB,EAAE,UAASC,MAAT,EAAiB;AACnC;AACA5B,cAAI,CAACF,KAAL,CAAW,cAAX,EAA2B8B,MAA3B;AACD;AAJU,OAAb;AAMA5B,UAAI,CAACa,cAAL,CAAoBgB,WAApB,CAAgC7B,IAAI,CAACT,GAArC;AACAS,UAAI,CAACa,cAAL,CAAoBiB,SAApB,CAA8BJ,MAA9B;AACA1B,UAAI,CAACe,iBAAL,CAAuBc,WAAvB,CAAmC7B,IAAI,CAACT,GAAxC;AACAS,UAAI,CAACM,UAAL,CAAgBN,IAAI,CAAChB,KAArB;AAEAgB,UAAI,CAACP,OAAL,GAAe,KAAf;AACAO,UAAI,CAACF,KAAL,CAAW,SAAX,EAAsB,KAAtB;AACD,KAlCH,EAkCKiC,KAlCL,CAkCWC,GAAE,IAAK;AACdhC,UAAI,CAACF,KAAL,CAAW,OAAX,EAAoBkC,GAApB;AACAhC,UAAI,CAACP,OAAL,GAAe,KAAf;AACAO,UAAI,CAACF,KAAL,CAAW,SAAX,EAAsB,KAAtB;AACD,KAtCH;AAuCD,GAxIY;;AAyIbmC,eAAa,GAAG;AACd,QAAIjC,IAAG,GAAI,IAAX;;AACA,QAAIA,IAAI,CAACR,SAAT,EAAoB;AAClBQ,UAAI,CAACR,SAAL,CAAe0C,OAAf;AACAlC,UAAI,CAACR,SAAL,GAAiB,IAAjB;AACF;AACD,GA/IY;;AAgJb2C,SAAO,EAAE;AACPC,kBAAc,EAAE,UAAUC,KAAI,GAAI,CAAC,CAAnB,EAAsBC,MAAK,GAAI,CAAC,CAAhC,EAAmC;AACjD,WAAK9C,SAAL,CAAegB,MAAf,CAAsB,CAAtB,EAAyB,KAAKzB,MAA9B,EADiD,CACV;;AACvC,UAAIsD,KAAI,KAAM,CAAC,CAAX,IAAgBC,MAAK,KAAM,CAAC,CAAhC,EAAmC;AACjCD,aAAI,GAAI,KAAK1B,KAAL,CAAWD,SAAX,CAAqB6B,WAA7B;AACF;;AAEA,aAAOF,KAAI,GAAI,KAAK7C,SAAL,CAAegD,QAAf,CAAwBH,KAAvC;AACD,KARM;AASPI,wBAAoB,EAAE,YAAY;AAChC,WAAKjD,SAAL,CAAegB,MAAf,CAAsB,CAAtB,EAAyB,KAAKzB,MAA9B,EADgC,CACO;;AACvC,UAAIuD,MAAK,GAAI,KAAK3B,KAAL,CAAWD,SAAX,CAAqBgC,YAAlC;AACA,UAAIC,QAAO,GAAI,KAAKhC,KAAL,CAAWD,SAAX,CAAqBkC,aAArB,CAAmCA,aAAlD;AACA,aAAOD,QAAQ,CAACD,YAAT,GAAwBJ,MAA/B;AACD,KAdM;AAePhC,cAAU,EAAE,UAAUuC,QAAV,EAAoB;AAC9B,UAAI,KAAKrD,SAAT,EAAoB;AAClB,YAAIqD,QAAO,KAAM,YAAjB,EAA+B;AAC7BA,kBAAO,GAAI,KAAKT,cAAL,EAAX;AACA,eAAKtC,KAAL,CAAW,cAAX,EAA2B+C,QAA3B;AACF,SAHA,MAIK,IAAIA,QAAO,KAAM,aAAjB,EAAgC;AACnCA,kBAAO,GAAI,KAAKJ,oBAAL,EAAX;AACA,eAAK3C,KAAL,CAAW,cAAX,EAA2B+C,QAA3B;AACF;;AACA,aAAKrD,SAAL,CAAegB,MAAf,CAAsBqC,QAAtB,EAAgC,KAAK9D,MAArC,EATkB,CAUlB;;AACA,YAAG,KAAKI,UAAR,EAAoB;AAClB,eAAKK,SAAL,CAAeyB,eAAf,GAAiC,KAAKzB,SAAL,CAAeiC,sBAAf,CAAsCqB,4BAAtC,CAAmE,KAAKtD,SAAL,CAAeuD,GAAlF,EAAuF,KAAKvD,SAAL,CAAeW,OAAtG,CAAjC;AACA,eAAKX,SAAL,CAAeyB,eAAf,CAA+BD,WAA/B,GAA6C,KAAKH,cAAlD;AACF;;AACA,aAAKrB,SAAL,CAAea,IAAf,GAfkB,CAgBlB;;AACA,YAAI,KAAKjB,IAAT,EAAe;AACb,eAAKI,SAAL,CAAe2B,SAAf,CAAyB6B,cAAzB,GAA0C,KAAKjC,iBAA/C;AACF;;AACA,aAAKtB,OAAL,GAAe,KAAf;AACA,aAAKK,KAAL,CAAW,SAAX,EAAsB,KAAtB;AACF;AACD,KAvCM;AAwCPmD,eAAW,EAAE,YAAY;AACvB,UAAI,KAAKhE,MAAT,EAAiB;AACf,aAAKqB,UAAL,CAAgB,YAAhB;AACF;AACF;AA5CO;AAhJI,CAAf","names":["getDocument","DefaultAnnotationLayerFactory","DefaultTextLayerFactory","PDFFindController","PDFLinkService","PDFPageView","EventBus","resizeSensor","PdfjsWorker","isPDFDocumentLoadingTask","obj","__PDFDocumentLoadingTask","createLoadingTask","src","options","source","url","Object","assign","TypeError","loadingTask","promise","onPassword","onProgress","components","props","type","String","Promise","default","page","Number","rotate","scale","resize","Boolean","annotation","text","data","internalSrc","pdf","pdfViewer","loading","watch","val","pdfInfo","_pdfInfo","$emit","numPages","self","getPage","then","pdfPage","setPdfPage","draw","drawScaled","newRotate","update","mounted","container","$refs","eventBus","pdfLinkService","externalLinkTarget","pdfFindController","linkService","annotationLayer","undefined","textLayer","pdfDocument","id","defaultViewport","getViewport","textLayerFactory","annotationLayerFactory","viewer","scrollPageIntoView","params","setDocument","setViewer","catch","err","beforeDestroy","destroy","methods","calculateScale","width","height","offsetWidth","viewport","calculateScaleHeight","offsetHeight","parentel","parentElement","newScale","createAnnotationLayerBuilder","div","findController","resizeScale"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\pfe\\frontfinal\\node_modules\\pdfvuer\\src\\Pdfvuer.vue"],"sourcesContent":["<template>\n  <div>\n    <slot v-if=\"loading\" name=\"loading\"/>\n    <div id=\"viewerContainer\" ref=\"container\">\n      <div id=\"viewer\" class=\"pdfViewer\"/>\n      <resizeSensor :initial=\"true\" @resize=\"resizeScale\"/>\n    </div>\n  </div>\n</template>\n<script>\n  'use strict';\n  import { getDocument } from 'pdfjs-dist';\n  import {\n    DefaultAnnotationLayerFactory,\n    DefaultTextLayerFactory,\n    PDFFindController,\n    PDFLinkService,\n    PDFPageView,\n    EventBus\n  } from 'pdfjs-dist/web/pdf_viewer.js';\n  import resizeSensor from './resize.vue'\n  import PdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry'\n  function isPDFDocumentLoadingTask(obj) {\n    return typeof (obj) === 'object' && obj !== null && obj.__PDFDocumentLoadingTask === true;\n  }\n\n  export function createLoadingTask(src, options) {\n    var source;\n    if (typeof (src) === 'string')\n      source = {\n        url: src\n      };\n    else if (typeof (src) === 'object' && src !== null)\n      source = Object.assign({}, src);\n    else\n      throw new TypeError('invalid src type');\n\n    var loadingTask = getDocument(source).promise;\n    loadingTask.__PDFDocumentLoadingTask = true; // since PDFDocumentLoadingTask is not public\n\n    if (options && options.onPassword)\n      loadingTask.onPassword = options.onPassword;\n\n    if (options && options.onProgress)\n      loadingTask.onProgress = options.onProgress;\n\n    return loadingTask;\n  }\n\n  export default {\n    createLoadingTask: createLoadingTask,\n    components: {\n      resizeSensor\n    },\n    props: {\n      src: {\n        type: [String, Object, Promise],\n        default: '',\n      },\n      page: {\n        type: Number,\n        default: 1,\n      },\n      rotate: {\n        type: Number,\n        default: 0,\n      },\n      scale: {\n        type: [Number, String],\n        default: 'page-width',\n      },\n      resize: {\n        type: Boolean,\n        default: false,\n      },\n      annotation: {\n        type: Boolean,\n        default: false,\n      },\n      text: {\n        type: Boolean,\n        default: true,\n      },\n    },\n    data: function () {\n      return {\n        internalSrc: this.src,\n        pdf: null,\n        pdfViewer: null,\n        loading: true,\n      }\n    },\n    watch: {\n      pdf: function (val) {\n        var pdfInfo = val.pdfInfo || val._pdfInfo\n        this.$emit('numpages', pdfInfo.numPages);\n      },\n      page: function (val) {\n        var self = this;\n        this.pdf.getPage(val).then(function (pdfPage) {\n          self.pdfViewer.setPdfPage(pdfPage);\n          self.pdfViewer.draw();\n        });\n      },\n      scale: function (val) {\n        this.drawScaled(val);\n      },\n      rotate: function (newRotate) {\n        if (this.pdfViewer) {\n          this.pdfViewer.update(this.scale, newRotate);\n          this.pdfViewer.draw();\n        }\n      },\n    },\n    mounted: function () {\n      var self = this;\n      if (!isPDFDocumentLoadingTask(self.internalSrc)) {\n        self.internalSrc = createLoadingTask(self.internalSrc);\n        self.$emit('loading', true);\n      }\n\n      var container = this.$refs.container;\n      var eventBus = new EventBus();\n\n      // (Optionally) enable hyperlinks within PDF files.\n      self.pdfLinkService = new PDFLinkService({\n        eventBus: eventBus,\n        externalLinkTarget: 2\n      });\n\n      // (Optionally) enable find controller.\n      self.pdfFindController = new PDFFindController({\n        eventBus: eventBus,\n        linkService: self.pdfLinkService\n      });\n\n      let annotationLayer = undefined,\n        textLayer = undefined;\n\n      if (self.annotation) {\n        annotationLayer = new DefaultAnnotationLayerFactory();\n      }\n      if (self.text) {\n        textLayer = new DefaultTextLayerFactory();\n      }\n\n      self.internalSrc\n        .then(function (pdfDocument) {\n          // Document loaded, retrieving the page.\n          self.pdf = pdfDocument;\n          return pdfDocument.getPage(self.page)\n        }).then(function (pdfPage) {\n          // Creating the page view with default parameters.\n          self.pdfViewer = new PDFPageView({\n            container: container,\n            id: self.page,\n            scale: 1,\n            defaultViewport: pdfPage.getViewport({\n              scale: 1\n            }),\n            eventBus: eventBus,\n            textLayerFactory: textLayer,\n            annotationLayerFactory: annotationLayer,\n          });\n          // Associates the actual page with the view, and drawing it\n          self.pdfViewer.setPdfPage(pdfPage);\n          // Set up a scrollPageIntoView function for our links\n          var viewer = {\n            scrollPageIntoView: function(params) {\n              // Send an event when clicking internal links so we can handle loading/scrolling to the correct page\n              self.$emit('link-clicked', params);\n            },\n          };\n          self.pdfLinkService.setDocument(self.pdf);\n          self.pdfLinkService.setViewer(viewer);\n          self.pdfFindController.setDocument(self.pdf);\n          self.drawScaled(self.scale);\n\n          self.loading = false;\n          self.$emit('loading', false);\n        }).catch(err => {\n          self.$emit('error', err)\n          self.loading = false\n          self.$emit('loading', false);\n        })\n    },\n    beforeDestroy() {\n      var self = this;\n      if (self.pdfViewer) {\n        self.pdfViewer.destroy();\n        self.pdfViewer = null;\n      }\n    },\n    methods: {\n      calculateScale: function (width = -1, height = -1) {\n        this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n        if (width === -1 && height === -1) {\n          width = this.$refs.container.offsetWidth;\n        }\n\n        return width / this.pdfViewer.viewport.width;\n      },\n      calculateScaleHeight: function () {\n        this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\n        var height = this.$refs.container.offsetHeight;\n        var parentel = this.$refs.container.parentElement.parentElement;\n        return parentel.offsetHeight / height;\n      },\n      drawScaled: function (newScale) {\n        if (this.pdfViewer) {\n          if (newScale === 'page-width') {\n            newScale = this.calculateScale();\n            this.$emit(\"update:scale\", newScale);\n          }\n          else if (newScale === 'page-height') {\n            newScale = this.calculateScaleHeight();\n            this.$emit(\"update:scale\", newScale);\n          }\n          this.pdfViewer.update(newScale, this.rotate);\n          // The SimpleLinkService from the DefaultAnnotationLayerFactory doesn't do anything with links so override with our LinkService after it is created\n          if(this.annotation) {\n            this.pdfViewer.annotationLayer = this.pdfViewer.annotationLayerFactory.createAnnotationLayerBuilder(this.pdfViewer.div, this.pdfViewer.pdfPage);\n            this.pdfViewer.annotationLayer.linkService = this.pdfLinkService;\n          }\n          this.pdfViewer.draw();\n          // The findController needs the text layer to have been created in the Draw() function, so link it in now\n          if (this.text) {\n            this.pdfViewer.textLayer.findController = this.pdfFindController;\n          }\n          this.loading = false;\n          this.$emit('loading', false);\n        }\n      },\n      resizeScale: function () {\n        if (this.resize) {\n          this.drawScaled('page-width');\n        }\n      }\n    }\n  }\n</script>\n<style src=\"pdfjs-dist/web/pdf_viewer.css\"></style>"]},"metadata":{},"sourceType":"module"}