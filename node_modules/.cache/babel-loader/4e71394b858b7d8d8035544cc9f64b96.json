{"ast":null,"code":"import { renderSlot as _renderSlot, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"viewerContainer\",\n  ref: \"container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"viewer\",\n  class: \"pdfViewer\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_resizeSensor = _resolveComponent(\"resizeSensor\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_ctx.loading ? _renderSlot(_ctx.$slots, \"loading\", {\n    key: 0\n  }) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_resizeSensor, {\n    initial: true,\n    onResize: $options.resizeScale\n  }, null, 8\n  /* PROPS */\n  , [\"onResize\"])], 512\n  /* NEED_PATCH */\n  )]);\n}","map":{"version":3,"mappings":";;AAGSA,IAAE,EAAC;AAAkBC,KAAG,EAAC;;;gCAC5BC,oBAAoC,KAApC,EAAoC;AAA/BF,IAAE,EAAC,QAA4B;AAAnBG,OAAK,EAAC;AAAa,CAApC;;AAAA;;;;;uBAHJC,oBAMM,KANN,EAMM,IANN,EAMM,CALQC,eAAZC,YAAqCD,WAArC,EAAqC,SAArC,EAAqC;AAAAE;AAAA,GAArC,qCAKI,EAJJL,oBAGM,KAHN,cAGM,CAFJM,UAEI,EADJC,aAAqDC,uBAArD,EAAqD;AAAtCC,WAAO,EAAE,IAA6B;AAAtBC,YAAM,EAAEC;AAAc,GAArD;;AAAA,iBACI,CAHN;;AAAA,GAII,CANN","names":["id","ref","_createElementVNode","class","_createElementBlock","_ctx","_renderSlot","key","_hoisted_2","_createVNode","_component_resizeSensor","initial","onResize","$options"],"sourceRoot":"","sources":["C:\\Users\\Karim Omrane\\Desktop\\PFE FI\\FRONT\\node_modules\\pdfvuer\\src\\Pdfvuer.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <slot v-if=\"loading\" name=\"loading\"/>\r\n    <div id=\"viewerContainer\" ref=\"container\">\r\n      <div id=\"viewer\" class=\"pdfViewer\"/>\r\n      <resizeSensor :initial=\"true\" @resize=\"resizeScale\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  'use strict';\r\n  import { getDocument } from 'pdfjs-dist';\r\n  import {\r\n    DefaultAnnotationLayerFactory,\r\n    DefaultTextLayerFactory,\r\n    PDFFindController,\r\n    PDFLinkService,\r\n    PDFPageView,\r\n    EventBus\r\n  } from 'pdfjs-dist/web/pdf_viewer.js';\r\n  import resizeSensor from './resize.vue'\r\n  import PdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry'\r\n  function isPDFDocumentLoadingTask(obj) {\r\n    return typeof (obj) === 'object' && obj !== null && obj.__PDFDocumentLoadingTask === true;\r\n  }\r\n\r\n  export function createLoadingTask(src, options) {\r\n    var source;\r\n    if (typeof (src) === 'string')\r\n      source = {\r\n        url: src\r\n      };\r\n    else if (typeof (src) === 'object' && src !== null)\r\n      source = Object.assign({}, src);\r\n    else\r\n      throw new TypeError('invalid src type');\r\n\r\n    var loadingTask = getDocument(source).promise;\r\n    loadingTask.__PDFDocumentLoadingTask = true; // since PDFDocumentLoadingTask is not public\r\n\r\n    if (options && options.onPassword)\r\n      loadingTask.onPassword = options.onPassword;\r\n\r\n    if (options && options.onProgress)\r\n      loadingTask.onProgress = options.onProgress;\r\n\r\n    return loadingTask;\r\n  }\r\n\r\n  export default {\r\n    createLoadingTask: createLoadingTask,\r\n    components: {\r\n      resizeSensor\r\n    },\r\n    props: {\r\n      src: {\r\n        type: [String, Object, Promise],\r\n        default: '',\r\n      },\r\n      page: {\r\n        type: Number,\r\n        default: 1,\r\n      },\r\n      rotate: {\r\n        type: Number,\r\n        default: 0,\r\n      },\r\n      scale: {\r\n        type: [Number, String],\r\n        default: 'page-width',\r\n      },\r\n      resize: {\r\n        type: Boolean,\r\n        default: false,\r\n      },\r\n      annotation: {\r\n        type: Boolean,\r\n        default: false,\r\n      },\r\n      text: {\r\n        type: Boolean,\r\n        default: true,\r\n      },\r\n    },\r\n    data: function () {\r\n      return {\r\n        internalSrc: this.src,\r\n        pdf: null,\r\n        pdfViewer: null,\r\n        loading: true,\r\n      }\r\n    },\r\n    watch: {\r\n      pdf: function (val) {\r\n        var pdfInfo = val.pdfInfo || val._pdfInfo\r\n        this.$emit('numpages', pdfInfo.numPages);\r\n      },\r\n      page: function (val) {\r\n        var self = this;\r\n        this.pdf.getPage(val).then(function (pdfPage) {\r\n          self.pdfViewer.setPdfPage(pdfPage);\r\n          self.pdfViewer.draw();\r\n        });\r\n      },\r\n      scale: function (val) {\r\n        this.drawScaled(val);\r\n      },\r\n      rotate: function (newRotate) {\r\n        if (this.pdfViewer) {\r\n          this.pdfViewer.update(this.scale, newRotate);\r\n          this.pdfViewer.draw();\r\n        }\r\n      },\r\n    },\r\n    mounted: function () {\r\n      var self = this;\r\n      if (!isPDFDocumentLoadingTask(self.internalSrc)) {\r\n        self.internalSrc = createLoadingTask(self.internalSrc);\r\n        self.$emit('loading', true);\r\n      }\r\n\r\n      var container = this.$refs.container;\r\n      var eventBus = new EventBus();\r\n\r\n      // (Optionally) enable hyperlinks within PDF files.\r\n      self.pdfLinkService = new PDFLinkService({\r\n        eventBus: eventBus,\r\n        externalLinkTarget: 2\r\n      });\r\n\r\n      // (Optionally) enable find controller.\r\n      self.pdfFindController = new PDFFindController({\r\n        eventBus: eventBus,\r\n        linkService: self.pdfLinkService\r\n      });\r\n\r\n      let annotationLayer = undefined,\r\n        textLayer = undefined;\r\n\r\n      if (self.annotation) {\r\n        annotationLayer = new DefaultAnnotationLayerFactory();\r\n      }\r\n      if (self.text) {\r\n        textLayer = new DefaultTextLayerFactory();\r\n      }\r\n\r\n      self.internalSrc\r\n        .then(function (pdfDocument) {\r\n          // Document loaded, retrieving the page.\r\n          self.pdf = pdfDocument;\r\n          return pdfDocument.getPage(self.page)\r\n        }).then(function (pdfPage) {\r\n          // Creating the page view with default parameters.\r\n          self.pdfViewer = new PDFPageView({\r\n            container: container,\r\n            id: self.page,\r\n            scale: 1,\r\n            defaultViewport: pdfPage.getViewport({\r\n              scale: 1\r\n            }),\r\n            eventBus: eventBus,\r\n            textLayerFactory: textLayer,\r\n            annotationLayerFactory: annotationLayer,\r\n          });\r\n          // Associates the actual page with the view, and drawing it\r\n          self.pdfViewer.setPdfPage(pdfPage);\r\n          // Set up a scrollPageIntoView function for our links\r\n          var viewer = {\r\n            scrollPageIntoView: function(params) {\r\n              // Send an event when clicking internal links so we can handle loading/scrolling to the correct page\r\n              self.$emit('link-clicked', params);\r\n            },\r\n          };\r\n          self.pdfLinkService.setDocument(self.pdf);\r\n          self.pdfLinkService.setViewer(viewer);\r\n          self.pdfFindController.setDocument(self.pdf);\r\n          self.drawScaled(self.scale);\r\n\r\n          self.loading = false;\r\n          self.$emit('loading', false);\r\n        }).catch(err => {\r\n          self.$emit('error', err)\r\n          self.loading = false\r\n          self.$emit('loading', false);\r\n        })\r\n    },\r\n    beforeDestroy() {\r\n      var self = this;\r\n      if (self.pdfViewer) {\r\n        self.pdfViewer.destroy();\r\n        self.pdfViewer = null;\r\n      }\r\n    },\r\n    methods: {\r\n      calculateScale: function (width = -1, height = -1) {\r\n        this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\r\n        if (width === -1 && height === -1) {\r\n          width = this.$refs.container.offsetWidth;\r\n        }\r\n\r\n        return width / this.pdfViewer.viewport.width;\r\n      },\r\n      calculateScaleHeight: function () {\r\n        this.pdfViewer.update(1, this.rotate); // Reset scaling to 1 so that \"this.pdfViewer.viewport.width\" gives proper width;\r\n        var height = this.$refs.container.offsetHeight;\r\n        var parentel = this.$refs.container.parentElement.parentElement;\r\n        return parentel.offsetHeight / height;\r\n      },\r\n      drawScaled: function (newScale) {\r\n        if (this.pdfViewer) {\r\n          if (newScale === 'page-width') {\r\n            newScale = this.calculateScale();\r\n            this.$emit(\"update:scale\", newScale);\r\n          }\r\n          else if (newScale === 'page-height') {\r\n            newScale = this.calculateScaleHeight();\r\n            this.$emit(\"update:scale\", newScale);\r\n          }\r\n          this.pdfViewer.update(newScale, this.rotate);\r\n          // The SimpleLinkService from the DefaultAnnotationLayerFactory doesn't do anything with links so override with our LinkService after it is created\r\n          if(this.annotation) {\r\n            this.pdfViewer.annotationLayer = this.pdfViewer.annotationLayerFactory.createAnnotationLayerBuilder(this.pdfViewer.div, this.pdfViewer.pdfPage);\r\n            this.pdfViewer.annotationLayer.linkService = this.pdfLinkService;\r\n          }\r\n          this.pdfViewer.draw();\r\n          // The findController needs the text layer to have been created in the Draw() function, so link it in now\r\n          if (this.text) {\r\n            this.pdfViewer.textLayer.findController = this.pdfFindController;\r\n          }\r\n          this.loading = false;\r\n          this.$emit('loading', false);\r\n        }\r\n      },\r\n      resizeScale: function () {\r\n        if (this.resize) {\r\n          this.drawScaled('page-width');\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n<style src=\"pdfjs-dist/web/pdf_viewer.css\"></style>"]},"metadata":{},"sourceType":"module"}